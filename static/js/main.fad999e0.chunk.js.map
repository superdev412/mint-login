{"version":3,"sources":["candy-machine.ts","helpers/Metadata.service.ts","config.ts","styled.js","helpers/getAccountNFTs.ts","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CANDY_MACHINE_PROGRAM","anchor","PublicKey","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","TOKEN_METADATA_PROGRAM_ID","awaitTransactionSignatureConfirmation","txid","timeout","connection","a","commitment","queryStatus","done","status","slot","confirmations","err","subId","Promise","resolve","reject","setTimeout","console","log","onSignature","result","context","e","error","getSignatureStatuses","signatureStatuses","value","sleep","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","Buffer","from","getCandyMachineState","anchorWallet","candyMachineId","provider","preflightCommitment","fetchIdl","idl","program","candyMachine","id","account","fetch","state","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","goLiveDate","Date","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getTokenWallet","wallet","mintOneToken","config","treasury","Keypair","generate","publicKey","token","metadata","masterEdition","getMinimumBalanceForRentExemption","MintLayout","span","rent","rpc","mintNft","accounts","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","clock","SYSVAR_CLOCK_PUBKEY","signers","instructions","createAccount","fromPubkey","newAccountPubkey","space","lamports","Token","createInitMintInstruction","createMintToInstruction","shortenAddress","address","chars","slice","ms","METADATA_PROGRAM_ID","METADATA_PREFIX","PubKeysInternedMap","Map","BinaryReader","prototype","readPubkey","array","this","readFixedArray","BinaryWriter","writePubkey","writeFixedArray","readPubkeyAsString","base58","encode","writePubkeyAsString","decode","MetadataKey","toPublicKey","key","get","set","seeds","reduce","agg","item","toString","toBase58","Creator","args","verified","share","Data","name","symbol","uri","sellerFeeBasisPoints","creators","Metadata","primarySaleHappened","isMutable","editionNonce","edition","MetadataV1","METADATA_SCHEMA","kind","fields","type","getMetadataAccount","tokenMint","METADATA_REPLACE","RegExp","decodeMetadata","buffer","deserializeUnchecked","replace","IMAGE_URL","Bg","styled","div","Header","MainContent","Footer","require","getNFTs","Connection","getParsedTokenAccountsByOwner","response","all","filter","accInfo","parsed","info","tokenAmount","uiAmount","map","mints","mintPubkeys","m","sliceIntoChunks","fetchChunks","tempArray","tempArray2","multipleAccounts","length","check","getMultipleAccountsInfo","push","temp","concat","nftMetadata","count","i","split","arr","chunkSize","res","chunk","Home","WalletDialogButton","Button","props","useState","setBalance","setIsSoldOut","setIsMinting","setItemsAvailable","setItemsRedeemed","setItemsRemaining","permit","setPermit","passcode","setPasscode","setCount","loading","setLoading","open","message","severity","undefined","alertState","setAlertState","startDate","setStartDate","useAnchorWallet","setCandyMachine","refreshCandyMachineState","onMint","mintTxId","txTimeout","msg","code","indexOf","getBalance","balance","LAMPORTS_PER_SOL","useEffect","style","display","width","className","onClick","window","src","textAlign","color","disabled","cursor","Snackbar","autoHideDuration","onClose","Alert","height","alignItems","paddingTop","fontSize","textTransform","fontWeight","placeholder","onChange","ev","target","process","network","startDateSeed","parseInt","theme","createTheme","palette","overrides","MuiButtonBase","root","justifyContent","MuiButton","padding","startIcon","marginRight","endIcon","marginLeft","App","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","autoConnect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fad999e0.chunk.js","sourcesContent":["import * as anchor from \"@project-serum/anchor\";\n\nimport {\n  MintLayout,\n  TOKEN_PROGRAM_ID,\n  Token,\n} from \"@solana/spl-token\";\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  \"cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ\"\n);\n\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\n);\n\nexport interface CandyMachine {\n  id: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection;\n  program: anchor.Program;\n}\n\ninterface CandyMachineState {\n  candyMachine: CandyMachine;\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  goLiveDate: Date,\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  commitment: anchor.web3.Commitment = \"recent\",\n  queryStatus = false\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log(\"Rejecting for timeout...\");\n      reject({ timeout: true });\n    }, timeout);\n    try {\n      subId = connection.onSignature(\n        txid,\n        (result: any, context: any) => {\n          done = true;\n          status = {\n            err: result.err,\n            slot: context.slot,\n            confirmations: 0,\n          };\n          if (result.err) {\n            console.log(\"Rejected via websocket\", result.err);\n            reject(status);\n          } else {\n            console.log(\"Resolved via websocket\", result);\n            resolve(status);\n          }\n        },\n        commitment\n      );\n    } catch (e) {\n      done = true;\n      console.error(\"WS error in setup\", txid, e);\n    }\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log(\"REST null result for\", txid, status);\n            } else if (status.err) {\n              console.log(\"REST error for\", txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log(\"REST no confirmations for\", txid, status);\n            } else {\n              console.log(\"REST confirmation for\", txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log(\"REST connection error: txid\", txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log(\"Returning status\", status);\n  return status;\n}\n\n/* export */ const createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<CandyMachineState> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: \"recent\",\n  });\n\n  const idl = await anchor.Program.fetchIdl(\n    CANDY_MACHINE_PROGRAM,\n    provider\n  );\n\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider);\n  const candyMachine = {\n    id: candyMachineId,\n    connection,\n    program,\n  }\n\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\n\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n  let goLiveDate = state.data.goLiveDate.toNumber();\n  goLiveDate = new Date(goLiveDate * 1000);\n\n  console.log({\n    itemsAvailable,\n    itemsRedeemed,\n    itemsRemaining,\n    goLiveDate,\n  })\n\n  return {\n    candyMachine,\n    itemsAvailable,\n    itemsRedeemed,\n    itemsRemaining,\n    goLiveDate,\n  };\n}\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from(\"edition\"),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from(\"metadata\"),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID\n    )\n  )[0];\n};\n\nconst getTokenWallet = async (\n  wallet: anchor.web3.PublicKey,\n  mint: anchor.web3.PublicKey\n) => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n    )\n  )[0];\n};\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachine,\n  config: anchor.web3.PublicKey, // feels like this should be part of candyMachine?\n  payer: anchor.web3.PublicKey,\n  treasury: anchor.web3.PublicKey,\n): Promise<string> => {\n  const mint = anchor.web3.Keypair.generate();\n  const token = await getTokenWallet(payer, mint.publicKey);\n  const { connection, program } = candyMachine;\n  const metadata = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const rent = await connection.getMinimumBalanceForRentExemption(\n    MintLayout.span\n  );\n\n  return await program.rpc.mintNft({\n    accounts: {\n      config,\n      candyMachine: candyMachine.id,\n      payer: payer,\n      wallet: treasury,\n      mint: mint.publicKey,\n      metadata,\n      masterEdition,\n      mintAuthority: payer,\n      updateAuthority: payer,\n      tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n      tokenProgram: TOKEN_PROGRAM_ID,\n      systemProgram: anchor.web3.SystemProgram.programId,\n      rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n      clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n    },\n    signers: [mint],\n    instructions: [\n      anchor.web3.SystemProgram.createAccount({\n        fromPubkey: payer,\n        newAccountPubkey: mint.publicKey,\n        space: MintLayout.span,\n        lamports: rent,\n        programId: TOKEN_PROGRAM_ID,\n      }),\n      Token.createInitMintInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        0,\n        payer,\n        payer\n      ),\n      createAssociatedTokenAccountInstruction(\n        token,\n        payer,\n        payer,\n        mint.publicKey\n      ),\n      Token.createMintToInstruction(\n        TOKEN_PROGRAM_ID,\n        mint.publicKey,\n        token,\n        payer,\n        [],\n        1\n      ),\n    ],\n  });\n}\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}","import { BinaryReader, BinaryWriter, deserializeUnchecked } from \"borsh\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport base58 from \"bs58\";\n\n/*\n * From https://gist.github.com/dvcrn/c099c9b5a095ffe4ddb6481c22cde5f4\n */\n\nexport const METADATA_PROGRAM_ID =\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\" as StringPublicKey;\nexport const METADATA_PREFIX = \"metadata\";\n\nconst PubKeysInternedMap = new Map<string, PublicKey>();\n\n// Borsh extension for pubkey stuff\n(BinaryReader.prototype as any).readPubkey = function () {\n  const reader = this as unknown as BinaryReader;\n  const array = reader.readFixedArray(32);\n  return new PublicKey(array);\n};\n\n(BinaryWriter.prototype as any).writePubkey = function (value: PublicKey) {\n  const writer = this as unknown as BinaryWriter;\n  writer.writeFixedArray(value.toBuffer());\n};\n\n(BinaryReader.prototype as any).readPubkeyAsString = function () {\n  const reader = this as unknown as BinaryReader;\n  const array = reader.readFixedArray(32);\n  return base58.encode(array) as StringPublicKey;\n};\n\n(BinaryWriter.prototype as any).writePubkeyAsString = function (\n  value: StringPublicKey\n) {\n  const writer = this as unknown as BinaryWriter;\n  writer.writeFixedArray(base58.decode(value));\n};\n\nconst toPublicKey = (key: string | PublicKey) => {\n  if (typeof key !== \"string\") {\n    return key;\n  }\n\n  let result = PubKeysInternedMap.get(key);\n  if (!result) {\n    result = new PublicKey(key);\n    PubKeysInternedMap.set(key, result);\n  }\n\n  return result;\n};\n\nconst findProgramAddress = async (\n  seeds: (Buffer | Uint8Array)[],\n  programId: PublicKey\n) => {\n  const key =\n    \"pda-\" +\n    seeds.reduce((agg, item) => agg + item.toString(\"hex\"), \"\") +\n    programId.toString();\n\n  const result = await PublicKey.findProgramAddress(seeds, programId);\n\n  return [result[0].toBase58(), result[1]] as [string, number];\n};\n\nexport type StringPublicKey = string;\n\nexport enum MetadataKey {\n  Uninitialized = 0,\n  MetadataV1 = 4,\n  EditionV1 = 1,\n  MasterEditionV1 = 2,\n  MasterEditionV2 = 6,\n  EditionMarker = 7,\n}\n\nclass Creator {\n  address: StringPublicKey;\n  verified: boolean;\n  share: number;\n\n  constructor(args: {\n    address: StringPublicKey;\n    verified: boolean;\n    share: number;\n  }) {\n    this.address = args.address;\n    this.verified = args.verified;\n    this.share = args.share;\n  }\n}\n\nclass Data {\n  name: string;\n  symbol: string;\n  uri: string;\n  sellerFeeBasisPoints: number;\n  creators: Creator[] | null;\n  constructor(args: {\n    name: string;\n    symbol: string;\n    uri: string;\n    sellerFeeBasisPoints: number;\n    creators: Creator[] | null;\n  }) {\n    this.name = args.name;\n    this.symbol = args.symbol;\n    this.uri = args.uri;\n    this.sellerFeeBasisPoints = args.sellerFeeBasisPoints;\n    this.creators = args.creators;\n  }\n}\n\nclass Metadata {\n  key: MetadataKey;\n  updateAuthority: StringPublicKey;\n  mint: StringPublicKey;\n  data: Data;\n  primarySaleHappened: boolean;\n  isMutable: boolean;\n  editionNonce: number | null;\n\n  // set lazy\n  masterEdition?: StringPublicKey;\n  edition?: StringPublicKey;\n\n  constructor(args: {\n    updateAuthority: StringPublicKey;\n    mint: StringPublicKey;\n    data: Data;\n    primarySaleHappened: boolean;\n    isMutable: boolean;\n    editionNonce: number | null;\n  }) {\n    this.key = MetadataKey.MetadataV1;\n    this.updateAuthority = args.updateAuthority;\n    this.mint = args.mint;\n    this.data = args.data;\n    this.primarySaleHappened = args.primarySaleHappened;\n    this.isMutable = args.isMutable;\n    this.editionNonce = args.editionNonce;\n  }\n}\n\nconst METADATA_SCHEMA = new Map<any, any>([\n  [\n    Data,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"name\", \"string\"],\n        [\"symbol\", \"string\"],\n        [\"uri\", \"string\"],\n        [\"sellerFeeBasisPoints\", \"u16\"],\n        [\"creators\", { kind: \"option\", type: [Creator] }],\n      ],\n    },\n  ],\n  [\n    Creator,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"address\", \"pubkeyAsString\"],\n        [\"verified\", \"u8\"],\n        [\"share\", \"u8\"],\n      ],\n    },\n  ],\n  [\n    Metadata,\n    {\n      kind: \"struct\",\n      fields: [\n        [\"key\", \"u8\"],\n        [\"updateAuthority\", \"pubkeyAsString\"],\n        [\"mint\", \"pubkeyAsString\"],\n        [\"data\", Data],\n        [\"primarySaleHappened\", \"u8\"], // bool\n        [\"isMutable\", \"u8\"], // bool\n      ],\n    },\n  ],\n]);\n\nexport async function getMetadataAccount(\n  tokenMint: StringPublicKey\n): Promise<StringPublicKey> {\n  return (\n    await findProgramAddress(\n      [\n        Buffer.from(METADATA_PREFIX),\n        toPublicKey(METADATA_PROGRAM_ID).toBuffer(),\n        toPublicKey(tokenMint).toBuffer(),\n      ],\n      toPublicKey(METADATA_PROGRAM_ID)\n    )\n  )[0];\n}\n\nconst METADATA_REPLACE = new RegExp(\"\\u0000\", \"g\");\nexport const decodeMetadata = (buffer: Buffer) => {\n  try {\n    const metadata = deserializeUnchecked(\n      METADATA_SCHEMA,\n      Metadata,\n      buffer\n    ) as Metadata;\n\n    metadata.data.name = metadata.data.name.replace(METADATA_REPLACE, \"\");\n    metadata.data.uri = metadata.data.uri.replace(METADATA_REPLACE, \"\");\n    metadata.data.symbol = metadata.data.symbol.replace(METADATA_REPLACE, \"\");\n    return metadata;\n  } catch (e) {\n    console.log(e);\n  }\n};\n","export const IMAGE_URL = process.env.PUBLIC_URL + \"assets/\";\n","import styled from \"styled-components\";\nimport { IMAGE_URL } from \"./config\";\n\nexport const Bg = styled.div`\n  padding-bottom: 0;\n  background: url(${IMAGE_URL}lep-bg.png) no-repeat center center;\n  width: 100%;\n  height: 100%;\n  background-size: cover;\n  overflow: auto;\n  .logo {\n    margin: auto;\n    margin-top: 25px;\n    width: 700px;\n    text-align: center;\n  }\n  @media only screen and (max-width: 768px) {\n    .logo {\n      width: 350px;\n    }\n  }\n  @media only screen and (max-width: 320px) {\n    .logo {\n      width: 250px;\n    }\n  }\n`;\n\nexport const Header = styled.div`\n  margin: auto;\n  background-color: rgb(70, 187, 23);\n  // border-radius:10px;\n  // width: 80%;\n  height: 100px;\n  .logo-img {\n    margin-top: 10px;\n    width: 300px;\n    margin-left: 70px;\n    cursor: pointer;\n  }\n  .connect-button {\n    height: 50px;\n    padding-left: 10px;\n    padding-right: 10px;\n    background: #ff9800;\n    text-align: center;\n    border-radius: 30px;\n    color: #fff;\n    font-size: 25px;\n    font-weight: 400;\n    white-space: nowrap;\n    border: 1px solid transparent;\n    user-select: none;\n    line-height: 1.5;\n    transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out,\n      border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n    font-family: apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto,\n      \"Helvetica Neue\", Arial, \"Noto Sans\", \"Liberation Sans\", sans-serif,\n      \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\",\n      \"Noto Color Emoji\" !important;\n    margin-top: 25px;\n    margin-bottom: 10px;\n    font-weight: 900 !important;\n    float: right;\n    margin-right: 20px;\n  }\n  @media only screen and (max-width: 768px) {\n    height: 120px;\n    .logo-img {\n      margin: auto;\n      width: 200px;\n    }\n    .connect-button {\n      width: 150px;\n      height: 40px;\n      font-size: 17px;\n      margin-top: 10px;\n      margin-bottom: 10px;\n      float: none;\n    }\n  }\n`;\n\nexport const MainContent = styled.div`\n  width: 570px;\n  background-color: rgb(234, 251, 131);\n  border: 3px solid rgba(19, 58, 19, 0.7);\n  border-radius: 25px;\n  margin: auto;\n  margin-top: 200px;\n  height: auto;\n  margin-bottom: 200px;\n  .address-con {\n    text-align: center;\n    background-color: rgba(234, 251, 131, 0.9);\n    margin: auto;\n    width: 500px;\n    margin-top: 0px;\n    border-top-left-radius: 20px;\n    border-top-right-radius: 20px;\n  }\n  .wallet-address {\n    font-family: Calibri;\n    font-size: 22px;\n    margin-top: 17px;\n    display: inline-block;\n  }\n  .NFT-logo {\n    display: block;\n    height: 350px;\n    width: 350px;\n    background: url(${IMAGE_URL}lep-gif.gif) no-repeat center center;\n    background-size: contain;\n    margin: auto;\n    margin-top: 20px;\n    margin-bottom: 40px;\n    margin-top: 50px;\n  }\n  .cost-con {\n    margin: auto;\n    margin-top: 20px;\n    width: 400px;\n  }\n  .cost-word {\n    font-size: 1.7rem;\n    font-weight: 400 !important;\n    word-wrap: break-word;\n    font-family: \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\",\n      \"Liberation Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\",\n      \"Segoe UI Symbol\", \"Noto Color Emoji\" !important;\n    word-break: break-word;\n    color: rgb(19 58 19);\n    font-variant: tabular-nums;\n    line-height: 1.5715;\n  }\n  .cost-val {\n    border: none;\n    border-bottom: 1px solid #b8cf66;\n    background-color: transparent;\n    color: red;\n    font-family: \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\",\n      \"Liberation Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\",\n      \"Segoe UI Symbol\", \"Noto Color Emoji\" !important;\n    font-weight: 500 !important;\n    font-size: 1.7rem;\n    width: 260px;\n  }\n  .cost-val:focus {\n    outline: none;\n  }\n  .mintNum-val {\n    width: 175px;\n  }\n  .minted-con {\n    margin: auto;\n    margin-top: 20px;\n    width: 400px;\n  }\n  .mint-word {\n    font-size: 1.6rem;\n    font-weight: 400 !important;\n    letter-spacing: -1px;\n    word-wrap: break-word;\n    font-family: \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\",\n      \"Liberation Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\",\n      \"Segoe UI Symbol\", \"Noto Color Emoji\" !important;\n    word-break: break-word;\n    color: rgb(19 58 19);\n    font-variant: tabular-nums;\n    line-height: 1.5715;\n    word-spacing: -1px;\n  }\n  .mint-value {\n    color: red;\n    font-size: 1.6rem;\n    font-weight: 500;\n    letter-spacing: -1px;\n    word-wrap: break-word;\n    font-family: \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\",\n      \"Liberation Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\",\n      \"Segoe UI Symbol\", \"Noto Color Emoji\" !important;\n    word-break: break-word;\n    font-variant: tabular-nums;\n    line-height: 1.5715;\n  }\n  .mint-button {\n    margin: auto;\n    margin-top: 50px;\n    margin-bottom: 30px;\n    width: 350px;\n    padding: 5px;\n    background: #ff9800;\n    text-align: center;\n    border-radius: 30px;\n    color: #fff;\n    font-size: 30px;\n    font-weight: 900 !important;\n    letter-spacing: 5px;\n    white-space: nowrap;\n    border: 1px solid transparent;\n    user-select: none;\n    line-height: 1.5;\n    transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out,\n      border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n    font-family: apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto,\n      \"Helvetica Neue\", Arial, \"Noto Sans\", \"Liberation Sans\", sans-serif,\n      \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\",\n      \"Noto Color Emoji\" !important;\n    display: block;\n  }\n  .NFT-logo {\n    display: block;\n    height: 300px;\n    width: 300px;\n    background: url(${IMAGE_URL}lep-gif.gif) no-repeat center center;\n    background-size: contain;\n    margin: auto;\n    margin-top: 20px;\n    margin-bottom: 50px;\n    margin-top: 50px;\n  }\n  @media only screen and (max-width: 768px) {\n    width: 350px !important;\n    .address-con {\n      width: 350px;\n    }\n    .wallet-address {\n      font-size: 15px;\n    }\n    .cost-con {\n      margin: auto;\n      margin-top: 20px;\n      width: 300px;\n    }\n    .cost-word {\n      font-size: 1.2rem;\n    }\n    .cost-val {\n      font-size: 1.2rem;\n      width: 200px;\n    }\n    .mintNum-val {\n      width: 139px;\n    }\n    .minted-con {\n      padding-left: 25px;\n    }\n    .mint-word {\n      font-size: 1.2rem;\n    }\n    .mint-value {\n      font-size: 1.2rem;\n    }\n    .mint-button {\n      width: 250px;\n      font-size: 27px;\n    }\n  }\n  @media only screen and (max-width: 320px) {\n    width: 270px !important;\n    .address-con {\n      width: 260px;\n    }\n    .wallet-address {\n      font-size: 12px;\n    }\n    .NFT-logo {\n      height: 250px;\n    }\n    .cost-con {\n      margin: auto;\n      margin-top: 20px;\n      width: 250px;\n    }\n    .cost-word {\n      font-size: 1.2rem;\n    }\n    .cost-val {\n      font-size: 1.2rem;\n      width: 160px;\n    }\n    .mintNum-val {\n      width: 100px;\n    }\n    .minted-con {\n      padding-left: 5px;\n    }\n    .mint-word {\n      font-size: 1.1rem;\n    }\n    .mint-value {\n      font-size: 1.1rem;\n    }\n    .mint-button {\n      width: 200px;\n      font-size: 25px;\n    }\n  }\n`;\nexport const Footer = styled.div`\n  background-color: rgb(70, 187, 23);\n  width: 100%;\n  border-top: 1px solid #40509d;\n  height: 60px;\n  text-align: center;\n  .footer-word {\n    color: white;\n    margin-top: 15px;\n    font-size: 1.25rem;\n    font-weight: 500;\n    letter-spacing: -1px;\n    word-wrap: break-word;\n    font-family: \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\",\n      \"Liberation Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\",\n      \"Segoe UI Symbol\", \"Noto Color Emoji\" !important;\n    font-variant: tabular-nums;\n    line-height: 1.5715;\n    display: inline-block;\n  }\n  .footer-preword {\n    color: #dedaaa;\n  }\n  @media only screen and (max-width: 320px) {\n    .footer-word {\n      font-size: 1rem;\n    }\n  }\n`;\n","import { decodeMetadata, getMetadataAccount } from \"./Metadata.service\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\nimport axios from \"axios\";\n\nconst { TOKEN_PROGRAM_ID } = require(\"@solana/spl-token\");\n\nexport async function getNFTs(wallet: any) {\n  // console.log('WALLET ', wallet);\n  let publicKey = new PublicKey(wallet);\n  let connection = new Connection(\"https://solana-api.projectserum.com/\");\n\n  let response = await connection.getParsedTokenAccountsByOwner(publicKey, {\n    programId: TOKEN_PROGRAM_ID,\n  });\n\n  let mints = await Promise.all(\n    response.value\n      .filter(\n        (accInfo) => accInfo.account.data.parsed.info.tokenAmount.uiAmount !== 0\n      )\n      .map(async (accInfo) =>\n        getMetadataAccount(accInfo.account.data.parsed.info.mint)\n      )\n  );\n\n  // let mints2 = await Promise.all(\n  //   response.value\n  //     .filter(\n  //       (accInfo) =>\n  //         accInfo.account.data.parsed.info.tokenAmount.uiAmount !== 0,\n  //     )\n  //     .map((accInfo) => accInfo.account.data.parsed.info.mint),\n  // );\n\n  let mintPubkeys = mints.map((m) => new PublicKey(m));\n\n  var fetchChunks = await sliceIntoChunks(mintPubkeys, 100);\n  var tempArray = [];\n  var tempArray2: any = [];\n  let multipleAccounts: any = [];\n  if (fetchChunks.length > 1) {\n    for (var check = 0; check < fetchChunks.length; check++) {\n      tempArray.push(\n        await connection.getMultipleAccountsInfo(fetchChunks[check])\n      );\n    }\n\n    for (var temp = 1; temp < tempArray.length; temp++) {\n      tempArray2 = tempArray[0].concat(tempArray[temp]);\n    }\n    multipleAccounts = tempArray2;\n  } else if (fetchChunks.length === 1) {\n    multipleAccounts = await connection.getMultipleAccountsInfo(fetchChunks[0]);\n  } else {\n    multipleAccounts = [];\n  }\n\n  // console.log('TEMPARRAY ', tempArray2);\n\n  // console.log('CHECK LENGTH ', multipleAccounts.length);\n\n  let nftMetadata = multipleAccounts\n    .filter((account: any) => account !== null)\n    .map((account: any) => decodeMetadata(account!.data));\n\n  // console.log(nftMetadata);\n\n  var count: any = 0;\n\n  for (var i = 0; i < nftMetadata.length; i++) {\n    // console.log(\"NFT METADATA \", nftMetadata[i]?.data.name.split(\" \")[0]);\n    if (nftMetadata[i]?.data.symbol === \"LEP\") {\n      if (nftMetadata[i]?.data.name.split(\" \")[0] === \"Lying\") {\n        count = count + 1;\n      }\n    }\n  }\n\n  // console.log(\"AHDBSYJFG \", count);\n\n  return count;\n}\n\n// (async () => {\n//   let publicKey = new PublicKey(\"BaZjXDo5YSCXnquRAgE4h9oputmLptqkoe7qXAM72GPx\");\n//   let connection = new Connection(clusterApiUrl(\"mainnet-beta\"), \"confirmed\");\n\n//   let response = await connection.getParsedTokenAccountsByOwner(publicKey, {\n//     programId: TOKEN_PROGRAM_ID,\n//   });\n\n//   let mints = await Promise.all(\n//     response.value\n//       .filter(\n//         (accInfo) => accInfo.account.data.parsed.info.tokenAmount.uiAmount !== 0\n//       )\n//       .map((accInfo) =>\n//         getMetadataAccount(accInfo.account.data.parsed.info.mint)\n//       )\n//   );\n\n//   let mintPubkeys = mints.map((m) => new PublicKey(m));\n\n//   let multipleAccounts = await connection.getMultipleAccountsInfo(mintPubkeys);\n\n//   let nftMetadata = multipleAccounts\n//     .filter((account) => account !== null)\n//     .map((account) => decodeMetadata(account!.data));\n\n//   console.log(nftMetadata[0]);\n// })();\n\nfunction sliceIntoChunks(arr: any, chunkSize: any) {\n  const res = [];\n  for (let i = 0; i < arr.length; i += chunkSize) {\n    const chunk = arr.slice(i, i + chunkSize);\n    res.push(chunk);\n  }\n  return res;\n}\n","import { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Countdown from \"react-countdown\";\nimport { Button, CircularProgress, Snackbar } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport * as anchor from \"@project-serum/anchor\";\n\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\n\nimport * as S from \"./styled\";\n\nimport {\n  CandyMachine,\n  awaitTransactionSignatureConfirmation,\n  getCandyMachineState,\n  mintOneToken,\n  shortenAddress,\n} from \"./candy-machine\";\nimport { IMAGE_URL } from \"./config\";\nimport { getNFTs } from \"./helpers/getAccountNFTs\";\nimport \"./Home.css\";\n\nconst ConnectButton = styled(WalletDialogButton)``;\n\nconst CounterText = styled.span``; // add your styles here\n\nconst MintContainer = styled.div``; // add your styles here\n\nconst MintButton = styled(Button)``; // add your styles here\n\nexport interface HomeProps {\n  candyMachineId: anchor.web3.PublicKey;\n  config: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  startDate: number;\n  treasury: anchor.web3.PublicKey;\n  txTimeout: number;\n}\n\nconst Home = (props: HomeProps) => {\n  const [balance, setBalance] = useState<number>();\n  const [isActive, setIsActive] = useState(false); // true when countdown completes\n  const [isSoldOut, setIsSoldOut] = useState(false); // true when items remaining is zero\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n\n  const [itemsAvailable, setItemsAvailable] = useState(0);\n  const [itemsRedeemed, setItemsRedeemed] = useState(0);\n  const [itemsRemaining, setItemsRemaining] = useState(0);\n  const [permit, setPermit] = useState(false);\n  const [passcode, setPasscode] = useState(\"\");\n  const [count, setCount] = useState(0);\n  const [loading, setLoading] = useState(true);\n\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n\n  const [startDate, setStartDate] = useState(new Date(props.startDate));\n\n  const wallet = useAnchorWallet();\n  const [candyMachine, setCandyMachine] = useState<CandyMachine>();\n\n  const toLanding = () => {\n    window.open(\"https://www.lyinglepreconslive.com/\");\n  };\n\n  const refreshCandyMachineState = () => {\n    (async () => {\n      if (!wallet) return;\n\n      const {\n        candyMachine,\n        goLiveDate,\n        itemsAvailable,\n        itemsRemaining,\n        itemsRedeemed,\n      } = await getCandyMachineState(\n        wallet as anchor.Wallet,\n        props.candyMachineId,\n        props.connection\n      );\n\n      setItemsAvailable(itemsAvailable);\n      setItemsRemaining(itemsRemaining);\n      setItemsRedeemed(itemsRedeemed);\n\n      setIsSoldOut(itemsRemaining === 0);\n      setStartDate(goLiveDate);\n      setCandyMachine(candyMachine);\n    })();\n  };\n\n  const onMint = async () => {\n    try {\n      setIsMinting(true);\n      if (wallet && candyMachine?.program) {\n        const mintTxId = await mintOneToken(\n          candyMachine,\n          props.config,\n          wallet.publicKey,\n          props.treasury\n        );\n\n        const status = await awaitTransactionSignatureConfirmation(\n          mintTxId,\n          props.txTimeout,\n          props.connection,\n          \"singleGossip\",\n          false\n        );\n\n        if (!status?.err) {\n          setAlertState({\n            open: true,\n            message: \"Congratulations! Mint succeeded!\",\n            severity: \"success\",\n          });\n        } else {\n          setAlertState({\n            open: true,\n            message: \"Mint failed! Please try again!\",\n            severity: \"error\",\n          });\n        }\n\n        setCount(count + 1);\n      }\n    } catch (error: any) {\n      // TODO: blech:\n      let message = error.msg || \"Minting failed! Please try again!\";\n      if (!error.msg) {\n        if (error.message.indexOf(\"0x138\")) {\n        } else if (error.message.indexOf(\"0x137\")) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf(\"0x135\")) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n          setIsSoldOut(true);\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: \"error\",\n      });\n    } finally {\n      if (wallet) {\n        const balance = await props.connection.getBalance(wallet.publicKey);\n        setBalance(balance / LAMPORTS_PER_SOL);\n      }\n      setIsMinting(false);\n      refreshCandyMachineState();\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (wallet) {\n        const balance = await props.connection.getBalance(wallet.publicKey);\n        setBalance(balance / LAMPORTS_PER_SOL);\n\n        setCount(await getNFTs(wallet?.publicKey));\n        // console.log(\"IN HERE\");\n        setLoading(false);\n      }\n    })();\n  }, [wallet, props.connection, count]);\n\n  useEffect(refreshCandyMachineState, [\n    wallet,\n    props.candyMachineId,\n    props.connection,\n  ]);\n\n  return (\n    <>\n      {permit ? (\n        <div\n        // className=\"mint-main\"\n        // style={{\n        //   backgroundImage: `url(${IMAGE_URL + \"lep-bg.png\"})`,\n        // }}\n        >\n          <S.Bg>\n            <S.Header>\n              <div style={{ display: \"inline-block\", width: \"99%\" }}>\n                <div className=\"row-main\">\n                  <div className=\"col-lg-4 col-md-3 col-sm-12\">\n                    <img\n                      className=\"logo-img\"\n                      onClick={toLanding}\n                      src={`${IMAGE_URL}logo.png`}\n                    />\n                  </div>\n                  <div\n                    className=\"col-lg-8 col-md-9 col-sm-12\"\n                    style={{ textAlign: \"center\" }}\n                  >\n                    {wallet ? (\n                      <button className=\"connect-button\">Connected</button>\n                    ) : (\n                      <WalletDialogButton\n                        className=\"connect-button\"\n                        // style={{ textAlign: \"center\", marginLeft: \"auto\" }}\n                      >\n                        Connect Wallet\n                      </WalletDialogButton>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </S.Header>\n\n            {/* <img\n        className=\"logo\"\n        src={`${IMAGE_URL}logo.png`}\n        style={{ textAlign: \"center\", marginLeft: \"auto !important\" }}\n      /> */}\n            <S.MainContent className=\"row\">\n              <div className=\"address-con\">\n                <span className=\"wallet-address\" style={{ color: \"#000\" }}>\n                  {shortenAddress(wallet?.publicKey.toBase58() || \"\")}\n                </span>\n              </div>\n              <span className=\"NFT-logo\"></span>\n              <div className=\"cost-con\">\n                <span className=\"cost-word\">Sol Price : </span>\n                <input\n                  className=\"cost-val\"\n                  type=\"number\"\n                  value={1}\n                  disabled={true}\n                  // onChange={(ev) => setState({ ...state, price: ev.target.value })}\n                />\n              </div>\n              <div className=\"cost-con\">\n                <span className=\"cost-word\">Max Mintable : </span>\n                <input\n                  className=\"cost-val mintNum-val\"\n                  type=\"number\"\n                  value={\n                    count == 0\n                      ? 3\n                      : count == 1\n                      ? 2\n                      : count == 2\n                      ? 1\n                      : count == 3\n                      ? 0\n                      : 0\n                  }\n                  disabled={true}\n                  // onChange={(ev) => setState({ ...state, num: ev.target.value })}\n                />\n              </div>\n              <div className=\"minted-con\">\n                <span className=\"mint-word\">Number Minted/Remaining :</span>\n                <span className=\"mint-value\">\n                  {wallet ? <>{itemsRedeemed - 20}</> : \"-\"}\n                </span>\n                <span className=\"mint-value\">/</span>\n                <span className=\"mint-value\">\n                  {wallet ? <>{itemsAvailable - 20}</> : \"-\"}\n                </span>\n              </div>\n              {wallet ? (\n                <>\n                  {count == 3 ? (\n                    <>\n                      <button className=\"mint-button\">Limit Reached!</button>\n                    </>\n                  ) : (\n                    <>\n                      {loading ? (\n                        <button className=\"mint-button\">Loading..</button>\n                      ) : (\n                        <button\n                          style={{ cursor: \"pointer\" }}\n                          className=\"mint-button\"\n                          onClick={() => {\n                            onMint();\n                          }}\n                        >\n                          Mint\n                        </button>\n                      )}\n                    </>\n                  )}\n                </>\n              ) : (\n                <button className=\"mint-button\">Connect first!</button>\n              )}\n            </S.MainContent>\n            <S.Footer>\n              <span className=\"footer-word footer-preword\">\n                All Rights Reserved by&nbsp;{\" \"}\n              </span>\n              <span className=\"footer-word\"> Lying LepreCons</span>\n            </S.Footer>\n          </S.Bg>\n          {/* <div> */}{\" \"}\n          {/* <img className=\"mint-gif\" alt=\"\" src={`${IMAGE_URL}lep-gif.gif`} /> */}\n          {/* </div> */}\n          {/* <main style={{ textAlign: \"center\", alignItems: \"center\" }}> */}{\" \"}\n          {/* {wallet && (\n    //   <p className=\"mint-info\">\n    //     {shortenAddress(wallet.publicKey.toBase58() || \"\")}\n    //   </p>\n    // )} */}{\" \"}\n          {/* {wallet && (\n    //   <p className=\"mint-info\">\n    //     Balance: {(balance || 0).toLocaleString()} SOL\n    //   </p>\n    // )} */}{\" \"}\n          {/* {wallet && <p className=\"mint-info\">Total Minted: {itemsAvailable}</p>} */}{\" \"}\n          {/* {wallet && (\n    //   <p className=\"mint-info\">\n    //     Total Minted: {itemsRedeemed}/{itemsAvailable}\n    //   </p>\n    // )} */}\n          {/* {wallet && <p className=\"mint-info\">Cost: 1SOL</p>} */}{\" \"}\n          {/* {wallet && <p className=\"mint-info\">Remaining: {itemsRemaining}</p>} */}{\" \"}\n          {/* <MintContainer>\n    //   {!wallet ? (\n    //     <ConnectButton>Connect Wallet</ConnectButton>\n    //   ) : (\n    //     <MintButton\n    //       className=\"mint-button\"\n    //       disabled={isSoldOut || isMinting || !isActive}\n    //       onClick={onMint}\n    //       variant=\"contained\"\n    //     >\n    //       {isSoldOut ? (\n    //         \"SOLD OUT\"\n    //       ) : isActive ? (\n    //         isMinting ? (\n    //           <CircularProgress />\n    //         ) : (\n    //           \"MINT\"\n    //         )\n    //       ) : (\n    //         <Countdown\n    //           date={startDate}\n    //           onMount={({ completed }) => completed && setIsActive(true)}\n    //           onComplete={() => setIsActive(true)}\n    //           renderer={renderCounter}\n    //         />\n    //       )}\n    //     </MintButton>\n    //   )}\n    // </MintContainer> */}\n          <Snackbar\n            open={alertState.open}\n            autoHideDuration={6000}\n            onClose={() => setAlertState({ ...alertState, open: false })}\n          >\n            <Alert\n              onClose={() => setAlertState({ ...alertState, open: false })}\n              severity={alertState.severity}\n            >\n              {alertState.message}\n            </Alert>\n          </Snackbar>\n          {/* </main> */}\n        </div>\n      ) : (\n        <>\n          <S.Bg>\n            <div\n              className=\"row\"\n              style={{\n                textAlign: \"center\",\n                height: \"100vh\",\n                width: \"100%\",\n              }}\n            >\n              <div style={{ alignItems: \"center\" }}>\n                <p\n                  style={{\n                    paddingTop: \"500px\",\n                    fontSize: \"28px\",\n                    textTransform: \"uppercase\",\n                    fontWeight: \"bold\",\n                  }}\n                >\n                  Please Enter Passcode:\n                </p>\n                <input\n                  className=\"cost-val\"\n                  type=\"password\"\n                  value={passcode}\n                  placeholder=\"Enter here\"\n                  onChange={(ev) => {\n                    setPasscode(ev.target.value);\n                    if (ev.target.value === \"leprecon2323\") {\n                      setPermit(true);\n                    } else {\n                      setPermit(false);\n                    }\n                  }}\n                />\n              </div>\n            </div>\n          </S.Bg>\n        </>\n      )}\n    </>\n  );\n};\n\ninterface AlertState {\n  open: boolean;\n  message: string;\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\n}\n\nconst renderCounter = ({ days, hours, minutes, seconds, completed }: any) => {\n  return (\n    <CounterText>\n      {hours + (days || 0) * 24} hours, {minutes} minutes, {seconds} seconds\n    </CounterText>\n  );\n};\n\nexport default Home;\n","import \"./App.css\";\nimport { useMemo } from \"react\";\n\nimport Home from \"./Home\";\n\nimport * as anchor from \"@project-serum/anchor\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getSolletExtensionWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\n\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\n\nconst treasury = new anchor.web3.PublicKey(\n  process.env.REACT_APP_TREASURY_ADDRESS!\n);\n\nconst config = new anchor.web3.PublicKey(\n  process.env.REACT_APP_CANDY_MACHINE_CONFIG!\n);\n\nconst candyMachineId = new anchor.web3.PublicKey(\n  process.env.REACT_APP_CANDY_MACHINE_ID!\n);\n\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\n\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\nconst connection = new anchor.web3.Connection(rpcHost);\n\nconst startDateSeed = parseInt(process.env.REACT_APP_CANDY_START_DATE!, 10);\n\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\n\nconst theme = createTheme({\n    palette: {\n        type: 'dark',\n    },\n    overrides: {\n        MuiButtonBase: {\n            root: {\n                justifyContent: 'flex-start',\n            },\n        },\n        MuiButton: {\n            root: {\n                textTransform: undefined,\n                padding: '12px 16px',\n            },\n            startIcon: {\n                marginRight: 8,\n            },\n            endIcon: {\n                marginLeft: 8,\n            },\n        },\n    },\n});\n\nconst App = () => {\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n  const wallets = useMemo(\n    () => [\n        getPhantomWallet(),\n        getSlopeWallet(),\n        getSolflareWallet(),\n        getSolletWallet({ network }),\n        getSolletExtensionWallet({ network })\n    ],\n    []\n  );\n\n  return (\n      <ThemeProvider theme={theme}>\n        <ConnectionProvider endpoint={endpoint}>\n          <WalletProvider wallets={wallets} autoConnect={true}>\n            <WalletDialogProvider>\n              <Home\n                candyMachineId={candyMachineId}\n                config={config}\n                connection={connection}\n                startDate={startDateSeed}\n                treasury={treasury}\n                txTimeout={txTimeout}\n              />\n            </WalletDialogProvider>\n          </WalletProvider>\n        </ConnectionProvider>\n      </ThemeProvider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}